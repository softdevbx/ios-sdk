// sourcery:file:Requests.swift
{% for case in type.MoltinAPIEndpoints.cases %}
// MARK: {{ case.name|upperFirstLetter }}Request - AutoMoltinRequest

public class {{ case.name|upperFirstLetter }}Request: MoltinRequest {

    public var endpoint: String = "{{ case.annotations.path }}"

    public typealias DefaultCollectionRequestHandler = CollectionRequestHandler<[{{ case.annotations.model }}]>
    public typealias DefaultObjectRequestHandler = ObjectRequestHandler<{{ case.annotations.model }}>
    

    /*
        Return all instances of type {{ case.name }}

        - parameters:
            - completionHandler: The handler to be called on success or failure
    */
    @discardableResult public func all(completionHandler: @escaping DefaultCollectionRequestHandler) -> MoltinRequest {
        return super.list(withPath: "\(self.endpoint)", completionHandler: completionHandler)
    }

    {% if case|annotated:"hasCustomType" %}    
    @discardableResult public func all<T: Codable>(completionHandler: @escaping CollectionRequestHandler<[T]>) -> MoltinRequest {
        return super.list(withPath: "\(self.endpoint)", completionHandler: completionHandler)
    }

    {% endif %}
    
    /*
        Return get an instance of {{ case.name }} by `id`

        - parameters:
            - forID: The ID of the object
            - completionHandler: The handler to be called on success or failure
    */
    @discardableResult public func get(forID id: String, completionHandler: @escaping DefaultObjectRequestHandler) -> MoltinRequest {
        return super.get(withPath: "\(self.endpoint)/\(id)", completionHandler: completionHandler)
    }

    {% if case|annotated:"hasCustomType" %}    
    @discardableResult public func get<T: Codable>(forID id: String, completionHandler: @escaping ObjectRequestHandler<T>) -> MoltinRequest {
        return super.get(withPath: "\(self.endpoint)/\(id)", completionHandler: completionHandler)
    }

    {% endif %}

    {% if case|annotated:"hasTree" %}
    /*
        Return the tree of a resource

        - parameters:
            - completionHandler: The handler to be called on success or failure
    */
    @discardableResult public func tree(completionHandler: @escaping DefaultCollectionRequestHandler) -> MoltinRequest {
        return super.list(withPath: "\(self.endpoint)/tree", completionHandler: completionHandler)
    }

    {% if case|annotated:"hasCustomType" %}    
    @discardableResult public func tree<T: Codable>(completionHandler: @escaping CollectionRequestHandler<[T]>) -> MoltinRequest {
        return super.list(withPath: "\(self.endpoint)/tree", completionHandler: completionHandler)
    }

    {% endif %}

    {% endif %}
}
{% endfor %}
// sourcery:end
